
bnoprog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800100  00800100  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce6  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000709  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000598  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 33       	cpi	r26, 0x35	; 53
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  88:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);
	twi_wait();

	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
  a0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <write_ptr>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	8e 0f       	add	r24, r30
  a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <write_ptr>
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	eb 5c       	subi	r30, 0xCB	; 203
  b4:	fe 4f       	sbci	r31, 0xFE	; 254
  b6:	80 83       	st	Z, r24
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <twi_wait>:
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <twi_wait>
  d0:	08 95       	ret

000000d2 <bno_read_version>:
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cc eb       	ldi	r28, 0xBC	; 188
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	0f 2e       	mov	r0, r31
  e6:	f4 ea       	ldi	r31, 0xA4	; 164
  e8:	ef 2e       	mov	r14, r31
  ea:	f0 2d       	mov	r31, r0
  ec:	e8 82       	st	Y, r14
  ee:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
  f2:	0b eb       	ldi	r16, 0xBB	; 187
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	82 e5       	ldi	r24, 0x52	; 82
  f8:	f8 01       	movw	r30, r16
  fa:	80 83       	st	Z, r24
  fc:	0f 2e       	mov	r0, r31
  fe:	f4 e8       	ldi	r31, 0x84	; 132
 100:	ff 2e       	mov	r15, r31
 102:	f0 2d       	mov	r31, r0
 104:	f8 82       	st	Y, r15
 106:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	f8 01       	movw	r30, r16
 10e:	80 83       	st	Z, r24
 110:	f8 82       	st	Y, r15
 112:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 116:	e8 82       	st	Y, r14
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 11c:	83 e5       	ldi	r24, 0x53	; 83
 11e:	f8 01       	movw	r30, r16
 120:	80 83       	st	Z, r24
 122:	f8 82       	st	Y, r15
 124:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 128:	0f 2e       	mov	r0, r31
 12a:	f4 ec       	ldi	r31, 0xC4	; 196
 12c:	ef 2e       	mov	r14, r31
 12e:	f0 2d       	mov	r31, r0
 130:	e8 82       	st	Y, r14
 132:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 136:	f8 01       	movw	r30, r16
 138:	d0 80       	ld	r13, Z
 13a:	e8 82       	st	Y, r14
 13c:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 140:	f8 01       	movw	r30, r16
 142:	e0 80       	ld	r14, Z
 144:	f8 82       	st	Y, r15
 146:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
 14a:	f8 01       	movw	r30, r16
 14c:	80 81       	ld	r24, Z
 14e:	94 e9       	ldi	r25, 0x94	; 148
 150:	98 83       	st	Y, r25
 152:	6d 2d       	mov	r22, r13
 154:	7e 2d       	mov	r23, r14
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	08 95       	ret

00000166 <bno_reset>:
 166:	95 b1       	in	r25, 0x05	; 5
 168:	9c 7f       	andi	r25, 0xFC	; 252
 16a:	95 b9       	out	0x05, r25	; 5
 16c:	88 23       	and	r24, r24
 16e:	21 f0       	breq	.+8      	; 0x178 <bno_reset+0x12>
 170:	84 b1       	in	r24, 0x04	; 4
 172:	81 60       	ori	r24, 0x01	; 1
 174:	84 b9       	out	0x04, r24	; 4
 176:	03 c0       	rjmp	.+6      	; 0x17e <bno_reset+0x18>
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	84 b9       	out	0x04, r24	; 4
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	82 60       	ori	r24, 0x02	; 2
 182:	84 b9       	out	0x04, r24	; 4
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <bno_reset+0x22>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <bno_reset+0x28>
 18e:	00 00       	nop
 190:	84 b1       	in	r24, 0x04	; 4
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	84 b9       	out	0x04, r24	; 4
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	23 ed       	ldi	r18, 0xD3	; 211
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <bno_reset+0x36>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <bno_reset+0x40>
 1a6:	00 00       	nop
 1a8:	08 95       	ret

000001aa <bno_update_write>:

uint8_t bno_update_write(volatile uint8_t* data, uint8_t len) {
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
 1b8:	d6 2f       	mov	r29, r22
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 1ba:	0f 2e       	mov	r0, r31
 1bc:	fc eb       	ldi	r31, 0xBC	; 188
 1be:	ef 2e       	mov	r14, r31
 1c0:	f1 2c       	mov	r15, r1
 1c2:	f0 2d       	mov	r31, r0
 1c4:	84 ea       	ldi	r24, 0xA4	; 164
 1c6:	f7 01       	movw	r30, r14
 1c8:	80 83       	st	Z, r24
	twi_wait();
 1ca:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	
	TWDR = (0x29 << 1); //sla + w
 1ce:	82 e5       	ldi	r24, 0x52	; 82
 1d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	f7 01       	movw	r30, r14
 1d8:	80 83       	st	Z, r24
	twi_wait();
 1da:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	
	for (uint8_t i = 0; i < len; i++) {
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <bno_update_write+0x50>
		TWDR = data[i];
 1e2:	f8 01       	movw	r30, r16
 1e4:	ec 0f       	add	r30, r28
 1e6:	f1 1d       	adc	r31, r1
 1e8:	80 81       	ld	r24, Z
 1ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		twi_wait();
 1f4:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	
	TWDR = (0x29 << 1); //sla + w
	TWCR = (1 << TWINT) | (1 << TWEN);
	twi_wait();
	
	for (uint8_t i = 0; i < len; i++) {
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	cd 17       	cp	r28, r29
 1fc:	90 f3       	brcs	.-28     	; 0x1e2 <bno_update_write+0x38>
		TWDR = data[i];
		TWCR = (1 << TWINT) | (1 << TWEN);
		twi_wait();
	}
	
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 1fe:	cc eb       	ldi	r28, 0xBC	; 188
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	84 ea       	ldi	r24, 0xA4	; 164
 204:	88 83       	st	Y, r24
	twi_wait();
 206:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	
	TWDR = (0x29 << 1) | 1; //sla + r
 20a:	0b eb       	ldi	r16, 0xBB	; 187
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	83 e5       	ldi	r24, 0x53	; 83
 210:	f8 01       	movw	r30, r16
 212:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 214:	0f 2e       	mov	r0, r31
 216:	f4 e8       	ldi	r31, 0x84	; 132
 218:	ff 2e       	mov	r15, r31
 21a:	f0 2d       	mov	r31, r0
 21c:	f8 82       	st	Y, r15
	twi_wait();
 21e:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	
	TWCR = (1 << TWINT) | (1 << TWEN);
 222:	f8 82       	st	Y, r15
	twi_wait();
 224:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_wait>
	register uint8_t resp = TWDR;
 228:	f8 01       	movw	r30, r16
 22a:	80 81       	ld	r24, Z
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 22c:	94 e9       	ldi	r25, 0x94	; 148
 22e:	98 83       	st	Y, r25
	
	return resp;
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	08 95       	ret

0000023e <main>:


int main(void)
{
	//uart
    UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	88 69       	ori	r24, 0x98	; 152
 246:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 248:	e2 ec       	ldi	r30, 0xC2	; 194
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	86 60       	ori	r24, 0x06	; 6
 250:	80 83       	st	Z, r24
	UBRR0 = 3; //250k
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 25a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//i2c
	TWBR = 12;
 25e:	8c e0       	ldi	r24, 0x0C	; 12
 260:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	
	
	bno_reset(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 b3 00 	call	0x166	; 0x166 <bno_reset>
	
	
	
	bno_ver ver = bno_read_version();
 26a:	0e 94 69 00 	call	0xd2	; 0xd2 <bno_read_version>
		
	while(!(UCSR0A & (1 << UDRE0)));
 26e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 272:	85 ff       	sbrs	r24, 5
 274:	fc cf       	rjmp	.-8      	; 0x26e <main+0x30>
	UDR0 = ver.sw_msb;
 276:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while(!(UCSR0A & (1 << UDRE0)));
 27a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 27e:	85 ff       	sbrs	r24, 5
 280:	fc cf       	rjmp	.-8      	; 0x27a <main+0x3c>
	UDR0 = ver.sw_lsb;
 282:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	

	bno_reset(1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 b3 00 	call	0x166	; 0x166 <bno_reset>
	
	sei();
 28c:	78 94       	sei
		
	//wait for firmware size
	while((write_ptr) != 6) {}
 28e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <write_ptr>
 292:	86 30       	cpi	r24, 0x06	; 6
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x50>
	while(!(UCSR0A & (1 << UDRE0)));
 296:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 29a:	85 ff       	sbrs	r24, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <main+0x58>
	UDR0 = bno_update_write(rx_buffer, 6);
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	85 e3       	ldi	r24, 0x35	; 53
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <bno_update_write>
 2a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	write_ptr = 0;
 2ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <write_ptr>
	
	
	//wait for packet size
	while((write_ptr) != 3) {}
 2b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <write_ptr>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x72>
	while(!(UCSR0A & (1 << UDRE0)));
 2b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2bc:	85 ff       	sbrs	r24, 5
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <main+0x7a>
	UDR0 = bno_update_write(rx_buffer, 3);
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	85 e3       	ldi	r24, 0x35	; 53
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <bno_update_write>
 2ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	write_ptr = 0;
 2ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <write_ptr>
	
    while (1) 
    {
		static int16_t packet_counter = 0;
		
		if (packet_counter != 5099) {
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2da:	8b 3e       	cpi	r24, 0xEB	; 235
 2dc:	93 41       	sbci	r25, 0x13	; 19
 2de:	91 f0       	breq	.+36     	; 0x304 <main+0xc6>
			//wait for bulk of the packets
			while((write_ptr) != 32) {}
 2e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <write_ptr>
 2e4:	80 32       	cpi	r24, 0x20	; 32
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0xa2>
			while(!(UCSR0A & (1 << UDRE0)));
 2e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ec:	85 ff       	sbrs	r24, 5
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <main+0xaa>
			UDR0 = bno_update_write(rx_buffer, 32);
 2f0:	60 e2       	ldi	r22, 0x20	; 32
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <bno_update_write>
 2fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			write_ptr = 0;
 2fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <write_ptr>
 302:	11 c0       	rjmp	.+34     	; 0x326 <main+0xe8>
		} else {
			//last packet is smaller
			while((write_ptr) != 24) {}
 304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <write_ptr>
 308:	88 31       	cpi	r24, 0x18	; 24
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0xc6>
			while(!(UCSR0A & (1 << UDRE0)));
 30c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 310:	85 ff       	sbrs	r24, 5
 312:	fc cf       	rjmp	.-8      	; 0x30c <main+0xce>
			UDR0 = bno_update_write(rx_buffer, 24);
 314:	68 e1       	ldi	r22, 0x18	; 24
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <bno_update_write>
 31e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			write_ptr = 0;
 322:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <write_ptr>
		}
		packet_counter++;
 326:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 32a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
 338:	cc cf       	rjmp	.-104    	; 0x2d2 <main+0x94>

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
